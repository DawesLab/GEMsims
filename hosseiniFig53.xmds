<?xmlversion = "2.0" encoding = "UTF-8"?><simulation xmds-version="2">  <name>hosseiniFig53</name>  <author> AMCDawes based on work by M.Hosseini </author>  <description>    Pseudo two-level atom example simulation from eq 4.27 and 4.28 of Hosseini thesis    used in fig 5.3 of the same with parameters:    gN/eta = 1.74 and eta*L = 16*gamma, and gama0 = 0  </description>  <features>    <benchmark/>    <error_check/>    <bing/>    <fftw plan="patient"/>    <globals>      <![CDATA[      const double sample_length = 4.0; //Length of the sample      const double time_input = 3; //mm      const double sigma = 1.5;      const double input_height = 1.0; // input pulse height      const double timeswitchz = 75.0;      ]]>    </globals>    <arguments>      <argument name="g" type="real" default_value="1.0" />      <argument name="gama0" type="real" default_value="0.0" />      <argument name="eta" type="real" default_value="8.0" />      <argument name="N" type="real" default_value="14.0" />    </arguments>  </features><!--In the following part, all of the dimensions used in the problem are defined, but in this case, only the dimensions of "time" and "z" are needed -->  <geometry>    <propagation_dimension> t </propagation_dimension>    <transverse_dimensions>      <dimension name="z" lattice="16000" domain="(0,4)" />    </transverse_dimensions>  </geometry><vector name="main" initial_space="z" type="complex"><components> sigma12 </components><initialisation><![CDATA[sigma12 = 0;]]></initialisation></vector><vector name="cross" initial_space="z" type="complex">  <components>    E  </components></vector><!-- Here we define what differential equations need to be solved and what algorithm we want to use --><sequence><integrate algorithm="ARK89" interval="150" steps="8000" tolerance="1.0e-6"><samples> 400 400 </samples><operators><operator kind="cross_propagation" algorithm="RK4" propagation_dimension="z"><integration_vectors> cross </integration_vectors><!--You can have a dependencies tag here. --><dependencies> main </dependencies><boundary_condition kind="left"><![CDATA[E=input_height*exp(-(t-time_input)*(t-time_input)/(sigma*sigma));]]></boundary_condition><![CDATA[dE_dz = i * N * sigma12;]]></operator><integration_vectors> main </integration_vectors><![CDATA[double sw = (t < timeswitchz ? 1.0:-1.0);dsigma12_dt = -1.0 * (gama0 + i*sw*eta*(z - sample_length/2))*sigma12 + i*g*E;]]></operators></integrate></sequence><output format="binary" filename="hosseiniFig53.xsil"> <group><sampling basis="z(800)" initial_sample="yes"><moments> sigma12real sigma12imag </moments><dependencies> main </dependencies><![CDATA[sigma12real = (sigma12).Re();sigma12imag = (sigma12).Im();]]></sampling></group><group><sampling basis="z(800)" initial_sample="no"><moments> probereal probeimag </moments><dependencies> cross </dependencies><![CDATA[probereal = E.Re();probeimag = E.Im();]]></sampling></group></output></simulation>