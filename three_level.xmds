<?xmlversion = "2.0" encoding = "UTF-8"?><simulation xmds-version="2">  <name>3level</name>  <author> AMCDawes based on work by M.Hosseini </author>  <description>    Three-level Gradient Echo Memory simulation.  </description>  <features>    <benchmark/>    <error_check/>    <bing/>    <fftw plan="patient"/>    <globals>      <![CDATA[      const double sample_length = 1.0; //Length of the sample      const double time_input = 3; //mm      const double sigma = 1.5;      const double input_height = 1.0; // input pulse height      const double timeswitchz = 20.0;      ]]>    </globals>    <arguments>      <argument name="g" type="real" default_value="1.0" />      <argument name="gama" type="real" default_value="0.0" />      <argument name="gamac" type="real" default_value="0.0" />      <argument name="gama0" type="real" default_value="0.0" />      <argument name="delta" type="real" default_value="600.0" />      <argument name="omc" type="real" default_value="12.0" />      <argument name="N" type="real" default_value="30.0" />      <argument name="eta" type="real" default_value="10.0" />    </arguments>  </features><!--In the following part, all of the dimensions used in the problem are defined, but in this case, only the dimensions of "time" and "z" are needed -->  <geometry>    <propagation_dimension> t </propagation_dimension>    <transverse_dimensions>      <dimension name="z" lattice="8000" domain="(0,1)" />    </transverse_dimensions>  </geometry><vector name="main" initial_space="z" type="complex"><components> alpha12 alpha13 </components><initialisation><![CDATA[alpha12 = 0;alpha13 = 0;]]></initialisation></vector><vector name="cross" initial_space="z" type="complex">  <components>    E  </components></vector><!-- Here we define what differential equations need to be solved and what algorithm we want to use --><sequence><integrate algorithm="ARK89" interval="40" steps="4000" tolerance="1.0e-6"><samples> 400 400 </samples><operators><operator kind="cross_propagation" algorithm="RK4" propagation_dimension="z"><integration_vectors> cross </integration_vectors><!--You can have a dependencies tag here. --><dependencies> main </dependencies><boundary_condition kind="left"><![CDATA[E=input_height*exp(-(t-time_input)*(t-time_input)/(sigma*sigma));]]></boundary_condition><![CDATA[dE_dz=i*N*alpha13;]]></operator><integration_vectors> main </integration_vectors><![CDATA[double sw = (t < timeswitchz ? 1.0:-1.0);dalpha13_dt = (-gama - gama0/2 - gamac/2 - i*delta)*alpha13 + i*g*E + i*omc*alpha12;dalpha12_dt = (-gama0 - gamac - i*sw*eta*(z - sample_length/2))*alpha12 + i*omc*alpha13;]]></operators></integrate></sequence><output format="binary" filename="3level.xsil"> <group><sampling basis="z(800)" initial_sample="yes"><moments> alpreal12 alpimag12 alpreal13 alpimag13 </moments><dependencies> main </dependencies><![CDATA[alpreal12 = (alpha12).Re();alpimag12 = (alpha12).Im();alpreal13 = (alpha13).Re();alpimag13 = (alpha13).Im();]]></sampling></group><group><sampling basis="z(800)" initial_sample="no"><moments> probereal probeimag </moments><dependencies> cross </dependencies><![CDATA[probereal = E.Re();probeimag = E.Im();]]></sampling></group></output></simulation>